plugins {
    id 'java-library'
    id 'java-conventions'
    id 'jacoco-report-aggregation'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.flywaydb.flyway' version '10.13.0'
}

group = 'com.kaua.ecommerce.auth.infrastructure'

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(':domain'))
    implementation(project(':application'))

    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'com.fasterxml.jackson.module:jackson-module-blackbird'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'com.h2database:h2'

    testImplementation(project(path: ':domain', configuration: 'testClasses'))
}

flyway {
    url = 'jdbc:postgresql://' + System.getenv('DATABASE_POSTGRESQL_URL') + '/auth-server-ms' ?: 'jdbc:postgresql://localhost:5432/accounts-ms'
    user = System.getenv('DATABASE_POSTGRESQL_USERNAME') ?: 'postgres'
    password = System.getenv('DATABASE_POSTGRESQL_PASSWORD') ?: '123456'
}


testCodeCoverageReport {
    reports {
        csv.required = true
        csv.outputLocation = file("$rootDir/build/reports/jacoco/test/jacocoTestReport.csv")
        html.required = true
        html.outputLocation = file("$rootDir/build/reports/jacoco/test/jacocoTestReport.html")
        xml.required = true
        xml.outputLocation = file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'com/kaua/ecommerce/auth/infrastructure/configurations/*',
                            'com/kaua/ecommerce/auth/infrastructure/Main.class'
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'com/kaua/ecommerce/auth/infrastructure/configurations/*',
                            'com/kaua/ecommerce/auth/infrastructure/Main.class'
                    ])
                })
        )
    }
}

tasks.named("jacocoTestReport") {
    dependsOn(testCodeCoverageReport)
}